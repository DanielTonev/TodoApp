Backbone.Events is mixed into the other Backbone “classes”, including:

Backbone
Backbone.Model
Backbone.Collection
Backbone.Router
Backbone.History
Backbone.View


<input class="toggle" type="checkbox" {{#if completed}} checked {{/if}}>

var Todo = Backbone.Model.extend({

  initialize: function(){
    console.log('This model has been initialized.');
  },

  defaults: {
    title: '',
    completed: false
  }
});

var myTodo = new Todo();

console.log(myTodo.get('title')); // empty string


myTodo.set("title", "Title attribute set through Model.set().");


// Setting the value of attributes via instantiation
var myTodo = new Todo({
  title: "Set through instantiation."
});

var Person = new Backbone.Model();
Person.on("change:name", function() { console.log('Name changed'); });
Person.set({name: 'Andrew'});
// log entry: Name changed

ZAGLUSHAVANE NA EVENTA CHANGE S SILENT

  Person.set({name: 'Jeremy'}, {silent: true});
  // no log entry

/////////

PROVERKA DALI E BIL PROMENEN ATTRIBUT-A

  console.log(Person.hasChanged("name"));
  // true: change was recorded
  console.log(Person.hasChanged(null));
  // true: something (anything) has changed

/////////

SLEDI ZA PROMQNATA NA INDIVIDUALEN ATTRIBUTE

      initialize: function(){
          console.log('This model has been initialized.');
          this.on('change:title', function(){
              console.log('Title value for this model has changed.');
          });
      },

//////////

VALIDACIQ

  var Person = new Backbone.Model({name: 'Jeremy'});

  // Validate the model name
  Person.validate = function(attrs) {
    if (!attrs.name) {
      return 'I need your name';
    }
  };

  // Change the name
  Person.set({name: 'Samuel'});
  console.log(Person.get('name'));
  // 'Samuel'

  // Remove the name attribute, force validation
  Person.unset('name', {validate: true});
  // false

  ! Validation functions can be as simple or complex as necessary. If the attributes provided are valid, nothing should be returned from .validate(). If they are invalid, an error value should be returned instead.

////////////

OSHTE ZA VALIDACIQTA 

  var Todo = Backbone.Model.extend({
    defaults: {
      completed: false
    },

    validate: function(attributes){
      if(attributes.title === undefined){
          return "Remember to set a title for your todo.";
      }
    },

    initialize: function(){
      console.log('This model has been initialized.');
      this.on("invalid", function(model, error){
          console.log(error);
      });
    }
  });

  var myTodo = new Todo();
  myTodo.set('completed', true, {validate: true}); // logs: Remember to set a title for your todo.
  console.log('completed: ' + myTodo.get('completed')); // completed: false

///

-------------- VIEWS -----------------


SYZDAVANE NA VIEW  - ELEMENT KOITO POSLE SE DOBAVQ KYM DOM DYRVOTO

  var TodosView = Backbone.View.extend({
    tagName: 'ul', // required, but defaults to 'div' if not set
    className: 'container', // optional, you can assign multiple classes to 
                            // this property like so: 'container homepage'
    id: 'todos' // optional
  });

  var todosView = new TodosView();
  console.log(todosView.el); // logs <ul id="todos" class="container"></ul>



  If the element already exists in the page, you can set el as a CSS selector that matches the element.

  el: '#footer'
  Alternatively, you can set el to an existing element when creating the view:

  var todosView = new TodosView({el: $('#footer')});


//////////

SELECTING

  The view.$el property is equivalent to $(view.el) and view.$(selector) is equivalent to  $(view.el).find(selector). 

////////////

EVENTS

    var View = Backbone.View.extend({
      events: {
        click: function(e) {
          console.log(view.el === e.target);
        }
      }
    });

/////

COLLECTION OF MODELS

  var Todo = Backbone.Model.extend({
    defaults: {
      title: '',
      completed: false
    }
  });

  var TodosCollection = Backbone.Collection.extend({
    model: Todo
  });

  var a = new Todo({ title: 'Go to Jamaica.'}),
      b = new Todo({ title: 'Go to China.'}),
      c = new Todo({ title: 'Go to Disneyland.'});

  var todos = new TodosCollection([a,b]);
  console.log("Collection size: " + todos.length);
  // Logs: Collection size: 2

  todos.add(c);
  console.log("Collection size: " + todos.length);
  // Logs: Collection size: 3

  todos.remove([a,b]);
  console.log("Collection size: " + todos.length);
  // Logs: Collection size: 1

  todos.remove(c);
  console.log("Collection size: " + todos.length);


  Note that add() and remove() accept both individual models and lists of models.

  var items = new Backbone.Collection;
  items.add([{ id : 1, name: "Dog" , age: 3}, { id : 2, name: "cat" , age: 2}]);
  items.add([{ id : 1, name: "Bear" }], {merge: true });
  items.add([{ id : 2, name: "lion" }]); // merge: false
  
  console.log(JSON.stringify(items.toJSON()));
  // [{"id":1,"name":"Bear","age":3},{"id":2,"name":"cat","age":2}]

//////////////

EVENTI NA KOLEKCII

  var TodosCollection = new Backbone.Collection();

  TodosCollection.on("add", function(todo) {
    console.log("I should " + todo.get("title") + ". Have I done it before? "  + (todo.get("completed") ? 'Yeah!': 'No.' ));
  });

  TodosCollection.add([
    { title: 'go to Jamaica', completed: false },
    { title: 'go to China', completed: false },
    { title: 'go to Disneyland', completed: true }
  ]);

  Mogat da se izpolzvat i za sledene smqnata na daden attribute

  TodosCollection.on("change:title", function(model) {
      console.log("Changed my mind! I should " + model.get('title'));
  });

      //same
      myTodo.on({
      'change:title' : titleChanged,
      'change:completed' : stateChanged
      });
      //

  TodosCollection.add([
    { title: 'go to Jamaica.', completed: false, id: 3 },
  ]);

  var myTodo = TodosCollection.get(3);

  myTodo.set('title', 'go fishing');
  // Logs: Changed my mind! I should go fishing

  TodosCollection.set([
      { id: 1, title: 'go to Jamaica.', completed: true },
      { id: 2, title: 'go to China.', completed: false },
      { id: 4, title: 'go to Disney World.', completed: false }
  ]);

  TodosCollection.reset([
    { title: 'go to Cuba.', completed: false }
  ]);

////////////

ZAQVKI KYM SYRVYRA I UPDEITVANE NA MODELA

  var Todo = Backbone.Model.extend({
    defaults: {
      title: '',
      completed: false
    }
  });

  var TodosCollection = Backbone.Collection.extend({
    model: Todo,
    url: '/todos'
  });

  var todos = new TodosCollection();
  todos.fetch(); // sends HTTP GET to /todos


  /// SYZADAVENE I UPDAITVANE 

  As mentioned earlier, a model’s validate() method is called automatically by save() and will trigger an invalid event on the model if validation fails.

  var Todo = Backbone.Model.extend({
    defaults: {
      title: '',
      completed: false
    }
  });

  var TodosCollection = Backbone.Collection.extend({
    model: Todo,
    url: '/todos'
  });

  var todos = new TodosCollection();
  todos.fetch();

  var todo2 = todos.get(2);
  todo2.set('title', 'go fishing');
  todo2.save(); // sends HTTP PUT to /todos/2

  todos.create({title: 'Try out code samples'}); // sends HTTP POST to /todos and adds to collection

//////

TRIENETO SE PRAVI S: 

  var todo2 = todos.get(2);
  todo2.destroy(); // sends HTTP DELETE to /todos/2 and removes from collection

///////////

EVENTITE 

  on(), off(), and trigger()

  Backbone.on('event', function() {console.log('Handled Backbone event');});
  Backbone.trigger('event'); // logs: Handled Backbone event

//////

POLEZNO

  var ourObject = {};

  // Mixin
  _.extend(ourObject, Backbone.Events);

  // Add a custom event
  ourObject.on('dance', function(msg){
    console.log('We triggered ' + msg);
  });

  // Trigger the custom event
  ourObject.trigger('dance', 'our event');

///////

SLUSHANE ZA IZOYLNQVANETO NA EVENTI 

  var a = _.extend({}, Backbone.Events);
  var b = _.extend({}, Backbone.Events);
  var c = _.extend({}, Backbone.Events);

  // add listeners to A for events on B and C
  a.listenTo(b, 'anything', function(event){ console.log("anything happened"); });
  a.listenTo(c, 'everything', function(event){ console.log("everything happened"); });

  // trigger an event
  b.trigger('anything'); // logs: anything happened

  // stop listening
  a.stopListening();

  // A does not receive these events
  b.trigger('anything');
  c.trigger('everything');

///////////////////

RUTERCHE

  var TodoRouter = Backbone.Router.extend({
      /* define the route and function maps for this router */
      routes: {
          "about" : "showAbout",
          /* Sample usage: http://example.com/#about */

          "todo/:id" : "getTodo",
          /* This is an example of using a ":param" variable which allows us to match
          any of the components between two URL slashes */
          /* Sample usage: http://example.com/#todo/5 */

          "search/:query" : "searchTodos",
          /* We can also define multiple routes that are bound to the same map function,
          in this case searchTodos(). Note below how we're optionally passing in a
          reference to a page number if one is supplied */
          /* Sample usage: http://example.com/#search/job */

          "search/:query/p:page" : "searchTodos",
          /* As we can see, URLs may contain as many ":param"s as we wish */
          /* Sample usage: http://example.com/#search/job/p1 */

          "todos/:id/download/*documentPath" : "downloadDocument",
          /* This is an example of using a *splat. Splats are able to match any number of
          URL components and can be combined with ":param"s*/
          /* Sample usage: http://example.com/#todos/5/download/files/Meeting_schedule.doc */

          /* If you wish to use splats for anything beyond default routing, it's probably a good
          idea to leave them at the end of a URL otherwise you may need to apply regular
          expression parsing on your fragment */

          "*other"    : "defaultRoute",
          /* This is a default route that also uses a *splat. Consider the
          default route a wildcard for URLs that are either not matched or where
          the user has incorrectly typed in a route path manually */
          /* Sample usage: http://example.com/# <anything> */

          "optional(/:item)": "optionalItem",
          "named/optional/(y:z)": "namedOptionalItem"
          /* Router URLs also support optional parts via parentheses, without having
            to use a regex.  */
      },

      showAbout: function(){
      },

      getTodo: function(id){
          /*
          Note that the id matched in the above route will be passed to this function
          */
          console.log("You are trying to reach todo " + id);
      },

      searchTodos: function(query, page){
          var page_number = page || 1;
          console.log("Page number: " + page_number + " of the results for todos containing the word: " + query);
      },

      downloadDocument: function(id, path){
      },

      defaultRoute: function(other){
          console.log('Invalid. You attempted to reach:' + other);
      }
  });

  /* Now that we have a router setup, we need to instantiate it */

  var myTodoRouter = new TodoRouter();

/////////////

FORCE NAVIGIRANE DO NQKAKYV PYT
    moje da se trigyrne methoda na routa ili da ne se: by default ne se 

  var TodoRouter = Backbone.Router.extend({
    routes: {
      "todo/:id": "viewTodo",
      "todo/:id/edit": "editTodo"
      // ... other routes
    },

    viewTodo: function(id){
      console.log("View todo requested.");
      this.navigate("todo/" + id + '/edit', {trigger: true}); // updates the fragment and triggers the route as well
    },

    editTodo: function(id) {
      console.log("Edit todo opened.");
    }
  });

  var myTodoRouter = new TodoRouter();

  Backbone.history.start();

////////////

Backbone’s Sync API

  Backbone.emulateHTTP = false; // set to true if server cannot handle HTTP PUT or HTTP DELETE
  Backbone.emulateJSON = false; // set to true if server cannot handle application/json requests

  ackbone.sync = function(method, model, options) {

    function success(result) {
      // Handle successful results from MyAPI
      if (options.success) {
        options.success(result);
      }
    }

    function error(result) {
      // Handle error results from MyAPI
      if (options.error) {
        options.error(result);
      }
    }

    options || (options = {});

    switch (method) {
      case 'create':
        return MyAPI.create(model, success, error);

      case 'update':
        return MyAPI.update(model, success, error);

      case 'patch':
        return MyAPI.patch(model, success, error);

      case 'delete':
        return MyAPI.destroy(model, success, error);

      case 'read':
        if (model.cid) {
          return MyAPI.find(model, success, error);
        } else {
          return MyAPI.findAll(model, success, error);
        }
    }
  };

////

POLEZNO

<script type="text/html" id="my-view-template">
  <div class="row">
    <label>First Name:</label>
    <span><%= firstName %></span>
  </div>
  <div class="row">
    <label>Last Name:</label>
    <span><%= lastName %></span>
  </div>
  <div class="row">
    <label>Email:</label>
    <span><%= email %></span>
  </div>
</script>

var MyView = Backbone.View.extend({
  template: $('#my-view-template').html(),

  render: function() {

    // compile the Underscore.js template
    var compiledTemplate = _.template(this.template);

    // render the template with the model data
    var data = _.clone(this.model.attributes);
    var html = compiledTemplate(data);

    // populate the view with the rendered html
    this.$el.html(html);
  }
});

var Person = Backbone.Model.extend({
  defaults: {
    "firstName": "Jeremy",
    "lastName": "Ashkenas",
    "email":    "jeremy@example.com"
  }
});

var Derick = new Person({
  firstName: 'Derick',
  lastName: 'Bailey',
  email: 'derickbailey@example.com'
});

var myView = new MyView({
  model: Derick
});

myView.setElement("#content");
myView.render();

// osvobojdavane na pamet 

var ZombieView = Backbone.View.extend({
  template: '#my-view-template',

  initialize: function() {
    // bind the model change to re-render this view
    this.listenTo(this.model, 'change', this.render);
  },

  close: function() {
    // unbind the events that this view is listening to
    this.stopListening();
  },

  render: function() {

    // This alert is going to demonstrate a problem
    alert('We`re rendering the view');

  }
});

var Jeremy = new Person({
  firstName: 'Jeremy',
  lastName: 'Ashkenas',
  email: 'jeremy@example.com'
});

// create the first view instance
var zombieView = new ZombieView({
  model: Jeremy
})
zombieView.close(); // double-tap the zombie

// create a second view instance, re-using
// the same variable name to store it
zombieView = new ZombieView({
  model: Jeremy
})

Jeremy.set('email', 'jeremyashkenas@example.com');

